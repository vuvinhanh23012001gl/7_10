from producttype import ProductType
from typing import Dict,Any,List
from folder_create import Create
from process_master import Proces_Shape_Master
from common_value import NAME_FILE_STATIC,NAME_FILE_CHOOSE_MASTER
import json
import os
import func


class ProductTypeManager:
    
    FILE_NAME_STATIC  = NAME_FILE_STATIC
    NAME_FOLDER_PRODUCT_LIST = "Product_list"
    NAME_DATA_PRODUCT_LIST = "data.json"
    Proces_Shape = Proces_Shape_Master()

    def __init__(self):
        self.product_types = {}
        self.path_product_list = self.get_patd_datajson()    # Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n c·ªßa d·∫´n t·ªõi n∆°i l∆∞u d·ªØ li·ªáu data.json
        self.data = self.get_file_data()                     # L·∫•y d·ªØ li·ªáu t·ª´ File ƒë·∫•y ra
        self.load_from_file()                                # Load File ƒë·∫•y ra

    def get_patd_datajson(self):
        """"H√†m n√†y tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n,d·∫´n t·ªõi data.json"""
        object_folder = Create()
        return object_folder.get_path_grandaugter(ProductTypeManager.NAME_DATA_PRODUCT_LIST,ProductTypeManager.NAME_FOLDER_PRODUCT_LIST,ProductTypeManager.FILE_NAME_STATIC)

    def load_from_file(self):
        """Load File v√†o trong ƒë·ªëi t∆∞·ª£ng Point d·∫ßu"""
        print("üì• ƒêang t·∫£i d·ªØ li·ªáu t·ª´ file JSON...")
        if self.data:
            for key in self.data.keys():
                type_id = self.data[key].get("type_id",-1)
                type_name = self.data[key].get("type_name",-1)
                xyz  = self.data[key].get("xyz",-1)
                if type_id == -1 or type_name == -1 or xyz == -1:
                    print("‚ùåKh√¥ng T√¨m Th·∫•y 1 S·ªë D·ªØ li·ªáu Khi Load Tr·∫£ v·ªÅ False")
                    return
                product = ProductType(type_id,type_name,xyz)
                product.Init_path() #Tao File luon cho no
                for point in self.data[key]["point_check"]:
                    product.add_list_point(point["x"], point["y"], point["z"], point["brightness"])
                self.product_types[key] = product   #Th√™m v√†o S·∫£n ph·∫©m
                # self.show_all()
        else:
            print("‚ùåData r·ªóng ch∆∞a c√≥ d·ªØ li·ªáu")
    def save_json_data(self, data_file_path:str):
        "Luu d·ªØ li·ªáu ƒëi·ªÉm v√†o ƒë∆∞·ªùng link data data.json"
        try:
            dir_name = os.path.dirname(data_file_path)
            if dir_name and not os.path.exists(dir_name):
                os.makedirs(dir_name)
            with open(data_file_path, 'w', encoding='utf-8') as f:
                json.dump(self.return_data_dict_all(), f, ensure_ascii=False, indent=4)
            print(f"‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu JSON v√†o: {data_file_path}")
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu JSON: {e}")
    def add_product_type(self,id:str,name:str,xyz:list,description:str="")->bool:
        """Th√™m ƒë·ªëi t∆∞·ª£ng ProductType v√†o danh 1 lo·∫°i s·∫£n ph·∫©m m·ªõi v√†o danh s√°ch c√°c ProductType ƒë·ªÉ qu·∫£n l√Ω
        Ki·ªÉm tra type n·∫øu tr√πng r·ªìi th√¨ tr·∫£ v·ªÅ  False
        Tr·∫£ v·ªÅ True n·∫øu th√™m th√†nh c√¥ng v√† print l·ªói
        Tr·∫£ v·ªÅ False n·∫øu th√™m kh√¥ng th√†nh c√¥ng v√† print l·ªói
        """
        product = ProductType(id,name,xyz)
        if description:
            product.description_product(description)
        status  = self.check_id_in_data(id)
        if status == 1: # Du lieu da co
            print("D·ªØ li·ªáu ƒë√£ c√≥ b·ªã tr√πng ID Kh√¥ng l∆∞u")
            return False
        elif status == 0:
            if(product.check_xyz()):
                print("üîîKi·ªÉm tra tr∆∞·ªõc khi th√™m OKE")
                product.Init_path()
                self.product_types[product.type_id] = product
                try:

                    self.save_json_data(self.path_product_list)
                    self.data = self.get_file_data()
                    self.load_from_file()
                    return True
                except Exception as e:
                    print(f"‚ùå L·ªói khi l∆∞u JSON sau khi th√™m: {e}")
                    return False
            else:
                print("‚ùåL·ªói Data Kh√¥ng H·ª£p L·ªá")
                False
        else:
            print("File Tr·ªëng C·ª© Th·∫ø L∆∞u")
            product.Init_path()
            self.product_types[product.type_id] = product
            self.save_json_data(self.path_product_list)
            self.data = self.get_file_data()
            self.load_from_file()
            return True

    def get_file_data(self)->Dict[str, Any]:
        """Tr·∫£ v·ªÅ data s·∫£n ph·∫©m hi·ªán t·∫°i ·ªü trong tao File co ten neu khong co file do
           Tr·∫£ v·ªÅ r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu trong file
        """
        object_folder = Create()
        return object_folder.get_data_grandaugter(ProductTypeManager.NAME_DATA_PRODUCT_LIST,ProductTypeManager.NAME_FOLDER_PRODUCT_LIST,ProductTypeManager.FILE_NAME_STATIC)

    def check_id_in_data(self, id: str) -> bool:
            """Tr·∫£ v·ªÅ -1 n·∫øu File tr·∫Øng tr·∫£ v·ªÅ 1 n·∫øu c√≥ , tr·∫£ v·ªÅ 0 n·∫øu k c√≥"""
            list_id = self.get_list_id_product()
            if list_id:
                if id in list_id:
                    return 1
                else:
                    return 0
            return -1

    def get_list_id_product(self)->List[any]:
        """Tr·∫£ v·ªÅ list danh s√°ch c√°c ID,N·∫øu kh√¥ng c√≥ tr·∫£ v·ªÅ m·∫£ng r·ªóng"""
        return [pt.type_id for pt in self.product_types.values()]

    def get_list_path_master(self)->List[any]:
        "Tr·∫£ v·ªÅ danh s√°ch ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß c·ªßa c√°c lis path master c:\\Users\\anhuv\\Desktop\\26_08\\25-08\\app\\app\\static\\Master_Photo\\Master_Vinhanh', 'c:\\Users\\anhuv\\Desktop\\26_08\\25-08\\app\\app\\static\\Master_Photo\\Master_Vinhan132' "
        return [pt.path_img_master for pt in self.product_types.values()]

    def get_list_path_master_product_img_name(self,idtype:str)->List[Any]:
        """Tr·∫£ v·ªÅ danh s√°ch c√°c path ·∫£nh Master c·ªßa lo·∫°i ID ƒë√≥"""
        if idtype is not None and  self.product_types is not None:
            for pt in self.product_types.values():
                if pt.type_id == idtype.strip():
                    # pt.get_path_name_folder_master_img() = static/Master_Photo/Master_SP01
                    return func.get_image_paths_from_folder(pt.get_path_name_folder_master_img())
        else:
            print("T√™n ID ho·∫∑c d·ªØ li·ªáu ch∆∞a c√≥")


    def find_by_id(self, type_id:str)->object:
        """Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng c√≥ id tr√πng v·ªõi id nh·∫≠p  n·∫øu kh√¥ng c√≥ tr·∫£ v·ªÅ -1"""
        return self.product_types.get(type_id,-1 )

    def get_list_point_find_id(self,type_id_product:str)->dict:
        """Tr·∫£ v·ªÅ None n·∫øu kh√¥ng t√¨m th·∫•y, Tr·∫£ v·ªÅ m·∫£ng danh s√°ch ƒëi·ªÉm c√≥ ID tr√πng"""
        result =  self.find_by_id(type_id_product)
        if result == -1:
            return  None
        else :
            return result.get_list_point()

    def get_product_name_find_id(self,type_id_product:str)->dict:
        """Tr·∫£ v·ªÅ t√™n s·∫£n ph·∫©m n·∫øu tr√πng ID n·∫øu kh√¥ng tr·∫£ v·ªÅ None"""
        result =  self.find_by_id(type_id_product)
        if result == -1:
            return None
        else :
            return result.get_type_name()

    def get_path_product_img_name(self,idtype:str):
        """Tr·∫£ v·ªÅ None n√™u kh√¥ng t√¨m th·∫•y sp c√≥ typeid c√≤n kh√¥ng tr·∫£ v·ªÅ link ·∫£nh c·ªßa s·∫£n ph·∫©m"""
        if idtype is not None and  self.product_types is not None:
            for pt in self.product_types.values():
                if pt.type_id == idtype.strip():
                     return pt.get_path_name_folder_product_img()
        else:
            print("T√™n ID ho·∫∑c d·ªØ li·ªáu ch∆∞a c√≥")

    def absolute_path(self,idtype:str):
        """object :Tr·∫£ v·ªÅ None n√™u kh√¥ng t√¨m th·∫•y sp c√≥ typeid c√≤n kh√¥ng tr·∫£ v·ªÅ link ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi c·ªßa s·∫£n ph·∫©m"""
        if idtype is not None and  self.product_types is not None:
            for pt in self.product_types.values():
                if pt.type_id == idtype.strip():
                    return pt.Path_Product
        else:
            print("T√™n ID ho·∫∑c d·ªØ li·ªáu ch∆∞a c√≥")

    def show_all(self):
        """object : show to√†n b·ªô th√¥ng tin c√≥ trong ƒë·ªëi t∆∞·ª£ng"""
        if not self.product_types:
            print("‚ùå Ch∆∞a c√≥ lo·∫°i s·∫£n ph·∫©m n√†o.")
            return
        print("üì¶ Danh s√°ch lo·∫°i s·∫£n ph·∫©m:")
        for pt in self.product_types.values():
            pt.show_product_type()
            print("-" * 40)

    def get_all_ids_and_names(self):
        """Tr·∫£ v·ªÅ dict ID v√† Name c·ªßa c√°c s·∫£n ph·∫©m hi·ªán c√≥"""
        return {
            "list_id": [pt.type_id for pt in self.product_types.values()],
            "list_name": [pt.type_name for pt in self.product_types.values()],
            "xyz":    [pt.xyz for pt in self.product_types.values()]
        }

    def return_data_dict_all(self):
        """object: Tr·∫£ v·ªÅ danh s√°ch d·ªØ data dict c√≥ trong ƒë·ªëi t∆∞·ª£ng"""
        result = {}
        for i in self.product_types.values():
            result[i.type_id] = i.protype_to_dict()
        # print(result)
        return result

    def get_all_id(self):
        """Tr·∫£ v·ªÅ danh s√°ch c√°c ID"""
        return list(self.product_types.keys())

    def count(self):
        """ƒê·∫øm s·ªë l∆∞·ª£ng s·∫£n ph·∫£m hi·ªán c√≥"""
        return len(self.product_types)

    def return_data_dict(self,type_id):
        """Tr·∫£ v·ªÅ dict c·ªßa ID nh·∫≠p"""
        if(self.find_by_id(type_id)!= -1):
             return self.find_by_id(type_id).protype_to_dict()
    def return_data_list_point(self,type_id:str)->list:
        """Tr·∫£ v·ªÅ list point cua id lo·∫°i c·∫ßn nh·∫≠p tr·∫£ v·ªÅ None n·∫øu kh√¥ng t√¨m th·∫•y ID"""
        if(self.find_by_id(type_id)!= -1):
             return [ i.dict_point_oil()  for i in self.find_by_id(type_id).get_list_point()]
    def remove_product_in_file_data(self,id:str):
        """X√≥a s·∫£n ph·∫©m c√≥ ID tr·∫£ v·ªÅ True n·∫øu th√†nh c√¥ng kh√¥ng ng∆∞·ª£c l·∫°i  > Ch·ªâ th·ª±c hi·ªán x√≥a data th√¥ng ch∆∞a x√≥a ƒë∆∞·ªùng linh ·∫£nh . link treain, link s·∫£n ph·∫©m"""
        if id in self.get_all_id():
            status_pop = self.product_types.pop(id,None)
            if status_pop is None:
                print(f"X√≥a File c√≥ ID:{id} kh√¥ng th√†nh c√¥ng")
                return False
            else:
                print(self.return_data_dict_all())
                self.save_json_data(self.path_product_list)
                self.data = self.get_file_data()
                self.load_from_file()
                print(f"X√≥a ID:{id} th√†nh c√¥ng trong file data.json")
                return True
        else:
            print("Kh√¥ng t√¨m th·∫•y ID trong danh s√°ch")
            return False

    def add_list_point_to_product(self,type_id:str,x:int,y:int,z:int,brightness:int)->bool:
        if type_id is None or x is None or y is None or z is None or brightness is None:
            print("Gi√° tr·ªã ƒë·∫ßu v√†o kh√°c Null")
            return False
        isObject = self.find_by_id(type_id)
        if isObject != -1:
            #Kiem tra xem co diem nao giong diem cho truoc khong
            arr_list_locations = self.get_list_point_find_id(type_id)
            if arr_list_locations is None: return False
            for arr_list_location in arr_list_locations:
                x_location = arr_list_location.get_x()
                y_location = arr_list_location.get_y()
                z_location = arr_list_location.get_z()
                if x_location == x and y_location == y and z_location == z:
                     print("ƒêi·ªÉm ƒë√£ t·ªìn t·∫°i, kh√¥ng th·ªÉ th√™m ƒëi·ªÉm tr√πng.")
                     return False
                # Kiem tra lon hon 0
                if x < 0 or y < 0 or z < 0:
                    print("Gi√° tr·ªã x, y, z ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0.")
                    return False
                # Kiem tra co nho hon xyz quy ƒë·ªãnh
                xyz = isObject.get_xyz()
                if x > xyz[0] or y > xyz[1] or z > xyz[2]:
                    print(f"Gi√° tr·ªã x, y, z ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng {xyz}.")
                    return False
            isObject.add_list_point(x, y, z, brightness)
            self.update_data_json()
            print("Th√™m ƒëi·ªÉm th√†nh c√¥ng")
            return True
        print("Kh√¥ng t√¨m th·∫•y ID trong danh s√°ch")
        return False
    def fix_score_point_product(self,type_id:str,x:int,y:int,z:int,brightness:int,index)->bool:
        if type_id is None or x is None or y is None or z is None or brightness is None:
            print("Gi√° tr·ªã ƒë·∫ßu v√†o kh√°c Null")
            return False
        isObject = self.find_by_id(type_id)
        if isObject != -1:
            if x < 0 or y < 0 or z < 0:
                    print("Gi√° tr·ªã x, y, z ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0.")
                    return False
            xyz = isObject.get_xyz()
            if x > xyz[0] or y > xyz[1] or z > xyz[2]:
                    print(f"Gi√° tr·ªã x, y, z ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng {xyz}.")
                    return False
            print("ƒë√£ v√†o ƒë√¢y")
            status_update_point = isObject.update_point_by_index(index,x, y, z, brightness)
            if status_update_point:
                self.update_data_json()
                print("Th√™m ƒëi·ªÉm th√†nh c√¥ng")
                return True
            print("Th√™m ƒëi·ªÉm kh√¥ng th√†nh c√¥ng")
            return False
        print("Kh√¥ng t√¨m th·∫•y ID trong danh s√°ch")
        return False
    def update_data_json(self)->None:
        self.save_json_data(self.path_product_list)
        self.data = self.get_file_data()
        self.load_from_file()
        print("C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu")

    def create_file_and_path_img_master(self,idtype:str,name_img:str)->bool:
        """ƒë·∫ßu v√†o: ID c·∫ßn t√¨m , t√™n ·∫£nh n·∫øu t√¨m th·∫•y
        ch·ª©c nƒÉng h√†m :  T·∫°o ra 1 ƒë∆∞·ªùng d·∫´n ·∫£nh c√≥ t√™n name_img n·∫±m trong th∆∞ m·ª•c ·∫£nh master c·ªßa lo·∫°i s·∫£n ph·∫©m
        """
        strip_data = idtype.strip()
        result =  self.find_by_id(strip_data)
        if result != -1:
            path_master = result.get_path_img_master()
            if not path_master:
                print("Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n Path")
                return False
            object_folder = Create()
            status = object_folder.create_file_in_folder(path_master,name_img)
            # self.path_img_master =
            return status
        else :
            print("Kh√¥ng t√¨m th·∫•y ID")
            return False

    def remove_product_type(self, type_id:str)->bool:
        """X√≥a t·∫•t c·∫£ li√™n quan ƒë·∫øn ID nh∆∞ master, ƒë∆∞·ªùng link ·∫£nh, ƒë∆∞·ªùng link
        s·∫£n ph·∫©m choose master,ƒë∆∞·ªùng link retraing,d√¢t l∆∞u trong file data"""
        print("Ti·∫øn H√†nh X√≥a ID")
        type_id = type_id.strip()
        isObject = self.find_by_id(type_id)
        if isObject!= -1:
            path_master = isObject.get_path_img_master()
            path_retraining = isObject.get_path_img_retraning()
            if path_master is not None and path_retraining is not None:
                print("File T·ªìn t·∫°i")
                object_folder = Create()
                print(path_master,"\n",path_retraining)
                status_img_master = object_folder.delete_folder(path_master)
                status_img_retraining = object_folder.delete_folder(path_retraining)
                if not status_img_master:
                    print("X√≥a Path Img master Kh√¥ng Th√†nh c√¥ng")
                    return False
                if not status_img_retraining:
                    print("X√≥a Path IMG retraining kh√¥ng th√†nh c√¥ng")
                    return False
                if status_img_master:
                    print("X√≥a Folder matster th√†nh c√¥ng")
                if status_img_retraining:
                    print("X√≥a Folder retraining th√†nh c√¥ng")
                path_product = isObject.get_Path_Product()
                if path_product:
                     path_img = object_folder.find_file_in_folder(path_product,f"Img_{isObject.type_id.strip()}.png")
                     if(path_img):
                        print("X√≥a File ·∫£nh th√†nh c√¥ng",path_img)
                        status_img_product = object_folder.delete_file(path_img)
                        if not status_img_product:
                            print("X√≥a File ·∫£nh s·∫£n ph·∫©m kh√¥ng th√†nh c√¥ng")
                        else:
                            print("X√≥a File ·∫£nh s·∫£n ph·∫©m th√†nh c√¥ng")
                     else :
                        print("Kh√¥ng t√¨m th·∫•y File ·∫£nh l∆∞u s·∫£n ph·∫©m x√≥a ·∫£nh ch∆∞a ƒëc")
                else:
                    print("ƒê∆∞·ªùng d·∫´n t·ªõi Product_Photo kh√¥ng t·ªìn t·∫°i")
                ProductTypeManager.Proces_Shape.get_file_data_json()  #Dam bao tat ca du lieu la moi nhat
                status_erase_master = ProductTypeManager.Proces_Shape.erase_product_master(type_id)
                status = self.remove_product_in_file_data(type_id)
                if status !=False  and status_erase_master != False:
                    print("X√≥a th√†nh c√¥ng 4 File")
                    func.create_choose_master(NAME_FILE_CHOOSE_MASTER) # t·∫°o file choose_master n·∫øu t·∫°o r·ªìi th√¨ th√¥i
                    choose_master_index = func.read_data_from_file(NAME_FILE_CHOOSE_MASTER)# ƒë·ªçc l·∫°i file choose master c≈© xem l·∫ßn tr∆∞·ªõc  ng∆∞·ªùi d√πng ch·ªçn g√¨
                    choose_product = choose_master_index.strip()
                    print(type(choose_product))
                    print("choose_product",choose_product)
                    if choose_product == type_id:
                        #xoa du lieu reset neu dang chon ve 0
                        func.clear_file_content(NAME_FILE_CHOOSE_MASTER)
                        func.write_data_to_file(NAME_FILE_CHOOSE_MASTER,"0")
                    print("X√≥a th√†nh c√¥ng")
                    return True
                else:
                    print("X√≥a b·ªã False")
                    return False
            else:
                print("File kh√¥ng t·ªìn t·∫°i")
                return False
        else:
            print("Kh√¥ng t√¨m th·∫•y ID")
            return False
    def remove_img_master_index_of_product(self,ID,index):
        """X√≥a ·∫£nh master c√≥ index ·ªü v·ªã tr√≠ index"""
        print("Ti·∫øn h√†nh x√≥a ·∫£nh master th·ª© index")
        list_id = self.get_list_id_product()
        if ID in list_id:
                if index < 0:
                    print("Index ph·∫£i l·ªõn 0")
                    return False  
                try:      
                   isObject = self.find_by_id(ID)
                   path_master = isObject.get_path_img_master()
                   print("T√¨m ·∫£nh c√≥ t√™n trong ƒë∆∞·ªùng d·∫´n",path_master)
                   list_file_in_dir_befor_index = os.listdir(path_master)
                   if not list_file_in_dir_befor_index:
                       print("Danh s√°ch r·ªóng")
                       return False
                   if len(list_file_in_dir_befor_index) <= index:
                       print("Trong th∆∞ m·ª•c ·∫£nh ch·ª©a kh√¥ng index kh√¥ng h·ª£p l·ªá") # tr∆∞·ªùng h·ª£p n√†y x·∫£y ra khi Data v·ªã tr√≠ c√≥ nh∆∞ng ch∆∞a ch·ª•p ·∫£nh l∆∞u 
                       return False
                   else:
                       print(f"T√¨m ·∫£nh c√≥ index :{index}")
                       name_file_index = self.find_file_by_index(list_file_in_dir_befor_index,index)
                       patd_index = os.path.join(path_master,name_file_index)
                       if not os.path.exists(patd_index):
                           print("File kh√¥ng t·ªìn t·∫°i")
                           return False
                       else:
                           print("File t·ªìn t·∫°i Ti·∫øn h√†nh x√≥a File")
                           os.remove(patd_index)
                           print("Ti·∫øn h√†nh ƒë·ªïi t√™n File ·∫£nh")
                           list_file_in_dir_after_index = os.listdir(path_master)
                           print("Danh s√°ch tr∆∞·ªõc khi x√≥a",list_file_in_dir_befor_index)
                           print("Danh s√°ch sau khi x√≥a",list_file_in_dir_after_index)
                           arr_new = self.insert_missing_files(list_file_in_dir_after_index,len(list_file_in_dir_after_index)-1)
                           for value1,value2 in zip(list_file_in_dir_after_index,arr_new):
                               path_value1 = os.path.join(path_master,value1)
                               path_value2 = os.path.join(path_master,value2)
                               print(path_value1)
                               print(path_value2)
                               os.rename(path_value1,path_value2)
                           print("ƒê·ªïi t√™n th√†nh c·ªëng")
                           print(f"X√≥a file {name_file_index} th√†nh c√¥ng")
                           return True
                except:
                    print("X√≥a l·ªói, ko x√≥a ƒë∆∞·ª£c")
                    return False
        else:
            print("Kh√¥ng t√¨m th·∫•y ID trong list ID")
            return False

    def remove_data_index_of_product(self,ID:str,index:int):
        """S·∫Ω x√≥a data ∆° vi tri index c√≥ trong 1 ID tr·∫£ v·ªÅ True n·∫øu x√≥a th√†nh c√¥ng tra v·ªÅ False n·∫øu x√≥a kh√¥ng th√†nh c√¥ng"""
        list_id = self.get_list_id_product()
        if ID in list_id:
            arr_point = self.get_list_point_find_id(ID)
            if arr_point:
                if len(arr_point) <= index:
                    print("Index ph·∫£i nh·ªè h∆°n s·ªë l∆∞·ª£ng ƒëi·ªÉm trong s√°ch ƒëi·ªÉm")
                    return False
                if index < 0:
                    print("Index ph·∫£i l·ªõn 0")
                    return False  
                try:      
                   self.product_types[ID].list_point.pop(index)
                   self.update_data_json()
                   print("X√≥a index th√†nh c√¥ng")
                   return True
                except:
                    print("X√≥a l·ªói, ko x√≥a ƒë∆∞·ª£c")
                    return False
            else:
                print("S·∫£n ph·∫©m ch∆∞a c√≥ list ID")
                return False

        else:
            print("Kh√¥ng t√¨m th·∫•y ID trong list ID")
            return False
    def find_file_by_index(self, file_list, index):
        target_file_name = f"img_{index}.png"
        if target_file_name in file_list:
            return target_file_name
        else:
            return None  # or you can return a custom message
    def insert_missing_files(self,file_list, max_index):
        result = []
        for i in range(max_index + 1):
            file_name = f"img_{i}.png"
            if file_name in file_list:
                result.append(file_name)
            else:
                result.append(file_name)  # still add to maintain order; can be handled differently if needed
        return result
    
    def remove_all_master_index(self,ID:str,index:int):
        print("--------------------------------------Remove All Master Index ------------------------------------")
        print("--------------------------------------C·∫ßn theo d√µi h√†m n√†y ------------------------------------")
        statuse_erase_master_index = ProductTypeManager.Proces_Shape.erase_master_index(ID,index)
        print("--------------------------------------K·∫øt th√∫c theo d√µi h√†m n√†y ------------------------------------")
        statuse_erase_img = self.remove_img_master_index_of_product(ID,index)
        statuse_erase_data = self.remove_data_index_of_product(ID,index)
        if statuse_erase_img == True and statuse_erase_data == True:
            print("X√≥a th√†nh c√¥ng ·∫£nh master th·ª© ",index)
            print("X√≥a th√†nh c√¥ng d·ªØ li·ªáu master th√∫",index)
            if not statuse_erase_master_index:
                print("X√≥a kh√¥ng th√†nh c√¥ng d·ªØ li·ªáu master do....")
            else:
                print("X√≥a th√†nh c√¥ng d·ªØ li·ªáu master")
        print("---------------------------------------------o0o--------------------------------------------------")




# #----------------------------------------------------------------------------------------------------------------------------
# quanly = ProductTypeManager()
# quanly.remove_data_index_of_product("SP01",3)

# quanly = ProductTypeManager()
# quanly.remove_all_master_index("SP01",1)

# quanly = ProductTypeManager()
# quanly.remove_img_master_index_of_product("SP01",0)
# quanly = ProductTypeManager()
# quanly.remove_product_type("SP02")

# quanly = ProductTypeManager()
# quanly.remove_data_index_of_product("SP01",3)

# quanly = ProductTypeManager()
# print(quanly.get_list_path_master())

# quanly = ProductTypeManager()
# print(quanly.remove_product_in_file_data('S201'))

# quanly = ProductTypeManager()
# print(quanly.get_list_path_master_product_img_name("SP01"))

# quanly = ProductTypeManager()
# print(quanly.create_file_and_path_img_master("SP01","anh1.png"))

# quanly = ProductTypeManager()
# quanly.remove_product_type("0")

# quanly = ProductTypeManager()
# print(quanly.return_data_dict("SP01"))

# quanly = ProductTypeManager()
# print(quanly.return_data_list_point("SP02"))

# quanly = ProductTypeManager()
# print(quanly.get_all_ids())

# quanly = ProductTypeManager()
# print(quanly.count())

# quanly = ProductTypeManager()
# print(quanly.find_by_id("SP1"))


# quanly = ProductTypeManager()
# for i in quanly.get_list_point_find_id("SP001"):
#     print(i)

# quanly = ProductTypeManager()
# print(quanly.get_product_name_find_id("SP12"))

# quanly = ProductTypeManager()
# quanly.show_all()

# quanly = ProductTypeManager()
# print(quanly.get_all_ids_and_names())

# quanly = ProductTypeManager()
# print(quanly.get_file_data())

# # # # # quanly.load_from_file()

# quanly = ProductTypeManager()
# quanly.add_list_point_to_product("SP01",1,41,8,80)
# quanly.add_list_point_to_product("SP01",56,70,10,80)
# quanly.add_list_point_to_product("SP01",80,60,12,80)

# quanly = ProductTypeManager()
# quanly.fix_score_point_product("SP01",12,40,12,80,2)
# # # # # quanly = ProductTypeManager()
# # # # # print(quanly.get_list_id_product())

# # # # # quanly = ProductTypeManager()
# # # # # print(quanly.get_list_path_master())
# # print(quanly.get_list_path_master_product_img_name("typeid1"))

# quanly.add_product_type("typeid1","xinchoa",[1,2,3])
# quanly.add_product_type("typeid2","xinchoa2",[1,2,3])

# quanly = ProductTypeManager()
# print(quanly.return_data_dict_all())


# print(quanly.find_by_id("idtype1"))
# print(quanly.get_list_point_find_id("idtype1"))
# # path = quanly.get_list_path_master()

# # # print(path)
# # path  = quanly.get_list_path_master_product_img_name("idtype1")
# # print(path)

# quanly = ProductTypeManager()
# # # # # # print(quanly.find_by_id("typeid2"))
# print(quanly.get_path_product_img_name("SP01"))

# quanly = ProductTypeManager()
# print(quanly.absolute_path("SP01"))

# # print(quanly.get_file_data())
# # # # # # T·∫°o c√°c lo·∫°i s·∫£n ph·∫©m
# pt1 = ProductType("idtype4", "Lo·∫°i A")
# pt2 = ProductType("idtype5", "Lo·∫°i B")

# # # # # # # # # Th√™m c√°c ƒëi·ªÉm
# pt1.add_list_point(1, 2, 3, 10)
# pt1.add_list_point(4, 5, 6, 20)

# pt2.add_list_point(7, 8, 9, 30)
# pt2.add_list_point(10, 11, 12, 40)
# # # # # # # # # Th√™m v√†o danh s√°ch qu·∫£n l√Ω


# quanly.return_data_dict_all()
# pt3 = ProductType("idtype3", "Lo·∫°i C")
# pt3.add_list_point(7, 8, 9, 30)
# pt3.add_list_point(10, 11, 12, 40)





# quanly.return_data_dict_all()
# # # # Hi·ªÉn th·ªã to√†n b·ªô

# # quanly.show_all()
# quanly.load_from_file()
# quanly.remove_product_type("idtype1")
# print(quanly.return_data_dict("idtype2"))
# print(quanly.return_data_dict_all())
# print(quanly.get_file_data())
# print(quanly.return_data_dict_all())
# Hi·ªÉn th·ªã sau khi x√≥a



# Loai_1  = ProductType("SP02", "Lo·∫°i A",[1,2,3])
# Loai_1.add_list_point(1, 2, 3, 10)
# Loai_1.add_list_point(1, 2, 3, 10)
# Loai_1.add_list_point(1, 2, 3, 10)
# Loai_1.add_list_point(3, 2, 5, 10)