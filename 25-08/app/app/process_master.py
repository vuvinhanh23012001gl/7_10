import json
from folder_create import Create
from common_value import NAME_FILE_STATIC
class Proces_Shape_Master():
    NAME_FOLDER_SAVE_DATA_MASTER = "Master_Regulations"
    NAME_FILE_SAVE_MASTER_REGULATIONS = "data_regulations.json"
    NAME_FOLDER_STATIC = NAME_FILE_STATIC
    HEIGHT_CONVERT = 830
    WIDTH_CONVERT  = 1328
    def __init__(self):
        self.object_folder = Create()
        self.path_save = self.init_file()
        self.list_regulations = self.get_file_data_json()    #Nh·ªØng c√°i n√†o thay ƒë·ªïi file trong data th√¨ ph·∫£i load l·∫°i d·ªØ li·ªáu cho   self.list_regulations 
    def init_file(self):
        return self.object_folder.get_path_grandaugter(
            Proces_Shape_Master.NAME_FILE_SAVE_MASTER_REGULATIONS,
            Proces_Shape_Master.NAME_FOLDER_SAVE_DATA_MASTER,
            Proces_Shape_Master.NAME_FOLDER_STATIC
        )
    def get_quanlity_master_of_id(self,ID):
        """Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng d·ªØ li·ªáu master t·∫°i m·ªói m·ªôt lo·∫°i s·∫£n ph·∫©m hay 1 t√≥a ƒë·ªô
        Tr·∫£ v·ªÅ None n·∫øu kh√¥ng t√¨m th·∫•y id
        Tr·∫£ v·ªÅ 0 n·∫øu r·ªóng , tr·∫£ v·ªÅ len s·∫£n ph·∫©m hi·ªán t·∫°i
        """
        list_ID = self.get_list_id_master()
        if not list_ID:
            print("Kh√¥ng c√≥ ID n√†o t·ªìn t·∫°i c√≥ th·ªÉ File r·ªóng") 
            return None
        if ID in list_ID :  
            return len([ i for i in self.list_regulations[ID]])  
        else:
            print("ID s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu regulation")
            return None
    
    def get_quanlity_shape_of_location_point(self,ID,index):
        """Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng h√¨nh shape trong 1 master t·∫°i m·ªôt ƒëi·ªÉm Index
        Tr·∫£ v·ªÅ None n·∫øu kh√¥ng t√¨m th·∫•y id
        Tr·∫£ v·ªÅ 0 n·∫øu r·ªóng , tr·∫£ v·ªÅ len s√≥ l∆∞·ª£ng h√¨nh trong 1 index
        """
        index = str(index)
        data_id = self.get_data_is_id(ID)
        if data_id:
            data_point_index = data_id.get(index,-1)
            if data_point_index == -1:
                print("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu index trong data regulation")
                return  None
            else:
                data_point_index = data_point_index.get("shapes",-1)
                if data_point_index == -1:
                    print("Kh√¥ng t√¨m th·∫•y Shapes")
                    return None
                else:
                    return len([i for i in data_point_index])
        else:
            print("Data kh√¥ng t·ªìn t·∫°i")
            return None
    def get_data_shape_of_location_point(self,ID,index):
        """Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng h√¨nh shape trong 1 master t·∫°i m·ªôt ƒëi·ªÉm Index
        Tr·∫£ v·ªÅ None n·∫øu kh√¥ng t√¨m th·∫•y id
        Tr·∫£ v·ªÅ 0 n·∫øu r·ªóng , tr·∫£ v·ªÅ len s√≥ l∆∞·ª£ng h√¨nh trong 1 index
        """
        
        index = str(index)
        data_id = self.get_data_is_id(ID)
        if data_id:
            data_point_index = data_id.get(index,-1)
            if data_point_index == -1:
                print("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu index trong data regulation")
                return  None
            else:
                data_point_index = data_point_index.get("shapes",-1)
                if data_point_index == -1:
                    print("Kh√¥ng t√¨m th·∫•y Shapes")
                    return None
                else:
                    return data_point_index
        else:
            print("Data kh√¥ng t·ªìn t·∫°i")
            return None

    def get_file_data_json(self):
        '''ƒê·ªçc file json trong File l∆∞u d·ªØ li·ªáu regualtion'''
        data = self.object_folder.get_data_in_path(self.path_save)
        return data if data else {}

    def save_shapes_to_json(self, type_id: str, data_master):
        """L∆∞u d·ªØ li·ªáu c·ªßa 1 data m·ªõi"""
        if not self.path_save:
            print("L∆∞u th·∫•t b·∫°i: ƒë∆∞·ªùng d·∫´n t·ªõi file kh√¥ng t·ªìn t·∫°i")
            return False
        self.list_regulations = self.get_file_data_json() or {}
        self.list_regulations[type_id] = data_master
        with open(self.path_save, 'w', encoding='utf-8') as f:
            json.dump(self.list_regulations, f, ensure_ascii=False, indent=4)
        self.update_data()
        return True
    def update_data(self) -> bool:
        """
        Ghi l·∫°i to√†n b·ªô d·ªØ li·ªáu self.list_regulations xu·ªëng file JSON.
        Tr·∫£ v·ªÅ True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i.
        """
        if not self.path_save:
            print("‚ùå L∆∞u th·∫•t b·∫°i: ƒë∆∞·ªùng d·∫´n t·ªõi file kh√¥ng t·ªìn t·∫°i")
            return False

        try:
            # ƒê·∫£m b·∫£o lu√¥n c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi nh·∫•t trong RAM
            with open(self.path_save, "w", encoding="utf-8") as f:
                json.dump(self.list_regulations, f, ensure_ascii=False, indent=4)

            # ƒê·ªçc l·∫°i file ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë√£ l∆∞u th√†nh c√¥ng
            self.list_regulations = self.get_file_data_json() or {}

            print("‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu th√†nh c√¥ng")
            return True

        except Exception as e:
            print(f"‚ùå L·ªói update_data: {e}")
            return False
    def load_file(self):
       """Load d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ File v√†o ƒë·ªëi t∆∞·ª£ng """
       self.list_regulations = self.get_file_data_json() 
    
    def check_all_rules(self, data_sp: dict) -> bool:
            """
            Ki·ªÉm tra to√†n b·ªô d·ªØ li·ªáu c·ªßa 1 s·∫£n ph·∫©m (vd: data["SP01"]).
            Rule:
            1. M·ªói shape ph·∫£i c√≥ t√™n (ten_hinh_min) v√† kh√¥ng r·ªóng.
            2. Trong 1 frame, c√°c t√™n kh√¥ng ƒë∆∞·ª£c tr√πng nhau.
            """
            all_ok = True

            for frame_id, frame_data in data_sp.items():
                print(f"\nüîç Ki·ªÉm tra Frame {frame_id}:")
                shapes = frame_data.get("shapes", [])

                # l·∫•y t·∫•t c·∫£ t√™n min
                names = []
                for idx, shape in enumerate(shapes):
                    name = str(shape.get("ten_hinh_min", "")).strip()
                    if not name:
                        print(f"‚ùå Frame {frame_id}: Shape #{idx+1} thi·∫øu ho·∫∑c r·ªóng 'ten_hinh_min'")
                        all_ok = False
                    names.append(name)

                # ki·ªÉm tra tr√πng l·∫∑p
                duplicates = [n for n in set(names) if names.count(n) > 1 and n]
                if duplicates:
                    print(f"‚ùå Frame {frame_id}: T√™n Min b·ªã tr√πng -> {duplicates}")
                    all_ok = False
                else:
                    print(f"‚úÖ Frame {frame_id}: Kh√¥ng c√≥ t√™n Min tr√πng.")

            print("\nüìå T·ªïng k·∫øt:", "‚úÖ T·∫•t c·∫£ h·ª£p l·ªá" if all_ok else "‚ùå C√≥ l·ªói trong d·ªØ li·ªáu")
            return all_ok
    def get_list_id_master(self):
        """Tr·∫£ v·ªÅ None n·∫øu trong file kh√¥ng c√≥ d·ªØ li·ªáu n√†o tr·∫£ v·ªÅ danh s√°ch d·ªØ li·ªáu c√≥ trong file"""
        if self.list_regulations:
            return [i for i in self.list_regulations]
    def get_data_is_id(self,ID:str):
        """Tr·∫£ v·ªÅ data master regulation c√≥ ID l√† id tr·∫£ v·ªÅ None n·∫øu kh√¥ng t√¨m th·∫•y ID """
        list_ID =  self.get_list_id_master()
        if not list_ID:
            print("Kh√¥ng c√≥ ID n√†o t·ªìn t·∫°i c√≥ th·ªÉ File r·ªóng") 
            return None
        if ID in list_ID :
            # print(self.list_regulations[ID])
            return self.list_regulations[ID]  
        else:
            print("ID s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu regulation")
            return None
    def erase_product_master(self,ID:str):
        """H√†m n√†y th·ª±c hi·ªán x√≥a master c√≥ ID l√†"""
        ID = ID.strip()
        if self.list_regulations:
            list_key = self.get_list_id_master()
            print(list_key)
            if not list_key:
                print("Trong File kh√¥ng c√≥ d·ªØ li·ªáu.X√≥a th√†nh c√¥ng")
                return True
            if ID in list_key:
                print("T√¨m th·∫•y ID th·ª±c hi·ªán x√≥a")
                status_erase = self.list_regulations.pop(ID,None)
                status_save  = self.update_data()
                if status_erase is not None  and status_save != False:
                    print("X√≥a th√†nh c√¥ng s·∫£n ph·∫©m c√≥ ID:",status_erase)
                    return True
                else:
                    print("X√≥a kh√¥ng th√†nh c√¥ng s·∫£n ph·∫©m c√≥ ID=",ID)
                    return False
            else:
                print("Kh√¥ng t√¨m th·∫•y ID ƒë√≥ trong s·∫£n ph·∫©m")
                return False
        else:
            print("S·∫£n ph·∫©m ch∆∞a t·ªìn t·∫°i master,master r·ªóng x√≥a,x√≥a th√†nh c√¥ng")
            return True #file rong roi chuc nang xoa dat duoc
    def erase_master_index(self, ID: str, index:int):
        """H√†m n√†y th·ª±c hi·ªán x√≥a index th·ª© bao nhi√™u trong 1 ID"""
        print("X√≥a master th·ª© index:", index)
        self.list_regulations = self.get_file_data_json() or {}
        print("self.list_regulations",self.list_regulations)
        if self.list_regulations:
            list_key = self.get_list_id_master()
            print("Danh s√°ch ID Master hi·ªán c√≥ :",list_key)
            if  ID in list_key:
                print("T√¨m th·∫•y master quy ƒë·ªãnh c√≥ ID",ID)
                arr_key = [i for i in self.list_regulations[ID]]
                print("Index ·∫£nh ƒë√£ c√≥:", arr_key)
                if arr_key:
                    if str(index) in arr_key:
                        self.list_regulations[ID].pop(str(index), None)
                        arr_key_new = list(self.list_regulations[ID].keys())
                        print("Sau khi x√≥a danh s√°ch ·∫£nh l√†:",arr_key_new)
                        if arr_key_new:
                            name_key_arr_new = [str(i) for i in range(len(arr_key)-1)]
                            print("Danh s√°ch ·∫£nh sau khi c·∫ßn ƒë·ªïi t√™n",name_key_arr_new)
                            for value1, value2 in zip(arr_key_new, name_key_arr_new):
                                self.list_regulations[ID][value2] = self.list_regulations[ID].pop(value1)
                            print("Update sau khi xoa")
                            self.update_data()
                            print("Danh s√°ch index c√≤n l·∫°i sau khi x√≥a", list(self.list_regulations[ID].keys()))
                            print("X√≥a th√†nh c√¥ng")
                            return True
                        else:
                          self.update_data()
                          print("Danh s√°ch ƒë√£ r·ªóng")
                          return False
                    else:
                       print("Index kh√¥ng n·∫±m trong data ƒëang c√≥")
                       return False
                else:
                    print("Lo·∫°i s·∫£n ph·∫©m n√†y ch∆∞a c√≥ d·ªØ li·ªáu Master regulation")
                    return False
            else:
                print("ID n√†y ch∆∞a t·∫°o master regulation")
                return False


# shape = Proces_Shape_Master()
# shape.erase_master_index("SP01",0)

# shape = Proces_Shape_Master()
# print(shape.get_quanlity_master_of_id("SP01"))

# shape = Proces_Shape_Master()
# print(shape.get_quanlity_shape_of_location_point("SP01",0))

# shape = Proces_Shape_Master()
# print(shape.get_data_shape_of_location_point("SP01",0))

# shape = Proces_Shape_Master()
# print(shape.get_list_id_master())

# shape = Proces_Shape_Master()
# shape.get_data_is_id("SP01")

# shape = Proces_Shape_Master()
# shape.erase_product_master("SP02")

# data =shape.get_file_data_json()
# ok = shape.check_all_rules(data["SP01"])
# print("K·∫æT LU·∫¨N CHUNG:", ok)